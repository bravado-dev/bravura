// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: protocol.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EscobariaServiceClient is the client API for EscobariaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EscobariaServiceClient interface {
	// To forward 'git upload-pack' to silver-backend for SSH sessions
	// First pack stdin is nil
	UploadPack(ctx context.Context, opts ...grpc.CallOption) (EscobariaService_UploadPackClient, error)
	// To forward 'git receive-pack' to silver-backend for SSH sessions
	// First pack stdin is nil
	ReceivePack(ctx context.Context, opts ...grpc.CallOption) (EscobariaService_ReceivePackClient, error)
	// To forward 'git upload-archive' to silver-backend for SSH sessions
	// First pack stdin is nil
	UploadArchive(ctx context.Context, opts ...grpc.CallOption) (EscobariaService_UploadArchiveClient, error)
	// The response body for GET /info/refs?service=git-upload-pack
	// Will be invoked when the user executes a `git fetch`, meaning the server
	// will upload the packs to that user. The user doesn't upload new objects.
	InfoRefsUploadPack(ctx context.Context, in *InfoRefsRequest, opts ...grpc.CallOption) (EscobariaService_InfoRefsUploadPackClient, error)
	// The response body for GET /info/refs?service=git-receive-pack
	// Will be invoked when the user executes a `git push`, but only advertises
	// references to the user.
	InfoRefsReceivePack(ctx context.Context, in *InfoRefsRequest, opts ...grpc.CallOption) (EscobariaService_InfoRefsReceivePackClient, error)
	// Request and response body for POST /upload-pack
	// First pack stdin is nil
	PostUploadPack(ctx context.Context, opts ...grpc.CallOption) (EscobariaService_PostUploadPackClient, error)
	// Request and response body for POST /receive-pack
	// First pack stdin is nil
	PostReceivePack(ctx context.Context, opts ...grpc.CallOption) (EscobariaService_PostReceivePackClient, error)
}

type escobariaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEscobariaServiceClient(cc grpc.ClientConnInterface) EscobariaServiceClient {
	return &escobariaServiceClient{cc}
}

func (c *escobariaServiceClient) UploadPack(ctx context.Context, opts ...grpc.CallOption) (EscobariaService_UploadPackClient, error) {
	stream, err := c.cc.NewStream(ctx, &EscobariaService_ServiceDesc.Streams[0], "/protocol.EscobariaService/UploadPack", opts...)
	if err != nil {
		return nil, err
	}
	x := &escobariaServiceUploadPackClient{stream}
	return x, nil
}

type EscobariaService_UploadPackClient interface {
	Send(*UploadPackRequest) error
	Recv() (*UploadPackResponse, error)
	grpc.ClientStream
}

type escobariaServiceUploadPackClient struct {
	grpc.ClientStream
}

func (x *escobariaServiceUploadPackClient) Send(m *UploadPackRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *escobariaServiceUploadPackClient) Recv() (*UploadPackResponse, error) {
	m := new(UploadPackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *escobariaServiceClient) ReceivePack(ctx context.Context, opts ...grpc.CallOption) (EscobariaService_ReceivePackClient, error) {
	stream, err := c.cc.NewStream(ctx, &EscobariaService_ServiceDesc.Streams[1], "/protocol.EscobariaService/ReceivePack", opts...)
	if err != nil {
		return nil, err
	}
	x := &escobariaServiceReceivePackClient{stream}
	return x, nil
}

type EscobariaService_ReceivePackClient interface {
	Send(*ReceivePackRequest) error
	Recv() (*ReceivePackResponse, error)
	grpc.ClientStream
}

type escobariaServiceReceivePackClient struct {
	grpc.ClientStream
}

func (x *escobariaServiceReceivePackClient) Send(m *ReceivePackRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *escobariaServiceReceivePackClient) Recv() (*ReceivePackResponse, error) {
	m := new(ReceivePackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *escobariaServiceClient) UploadArchive(ctx context.Context, opts ...grpc.CallOption) (EscobariaService_UploadArchiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &EscobariaService_ServiceDesc.Streams[2], "/protocol.EscobariaService/UploadArchive", opts...)
	if err != nil {
		return nil, err
	}
	x := &escobariaServiceUploadArchiveClient{stream}
	return x, nil
}

type EscobariaService_UploadArchiveClient interface {
	Send(*UploadArchiveRequest) error
	Recv() (*UploadArchiveResponse, error)
	grpc.ClientStream
}

type escobariaServiceUploadArchiveClient struct {
	grpc.ClientStream
}

func (x *escobariaServiceUploadArchiveClient) Send(m *UploadArchiveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *escobariaServiceUploadArchiveClient) Recv() (*UploadArchiveResponse, error) {
	m := new(UploadArchiveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *escobariaServiceClient) InfoRefsUploadPack(ctx context.Context, in *InfoRefsRequest, opts ...grpc.CallOption) (EscobariaService_InfoRefsUploadPackClient, error) {
	stream, err := c.cc.NewStream(ctx, &EscobariaService_ServiceDesc.Streams[3], "/protocol.EscobariaService/InfoRefsUploadPack", opts...)
	if err != nil {
		return nil, err
	}
	x := &escobariaServiceInfoRefsUploadPackClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EscobariaService_InfoRefsUploadPackClient interface {
	Recv() (*InfoRefsResponse, error)
	grpc.ClientStream
}

type escobariaServiceInfoRefsUploadPackClient struct {
	grpc.ClientStream
}

func (x *escobariaServiceInfoRefsUploadPackClient) Recv() (*InfoRefsResponse, error) {
	m := new(InfoRefsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *escobariaServiceClient) InfoRefsReceivePack(ctx context.Context, in *InfoRefsRequest, opts ...grpc.CallOption) (EscobariaService_InfoRefsReceivePackClient, error) {
	stream, err := c.cc.NewStream(ctx, &EscobariaService_ServiceDesc.Streams[4], "/protocol.EscobariaService/InfoRefsReceivePack", opts...)
	if err != nil {
		return nil, err
	}
	x := &escobariaServiceInfoRefsReceivePackClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EscobariaService_InfoRefsReceivePackClient interface {
	Recv() (*InfoRefsResponse, error)
	grpc.ClientStream
}

type escobariaServiceInfoRefsReceivePackClient struct {
	grpc.ClientStream
}

func (x *escobariaServiceInfoRefsReceivePackClient) Recv() (*InfoRefsResponse, error) {
	m := new(InfoRefsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *escobariaServiceClient) PostUploadPack(ctx context.Context, opts ...grpc.CallOption) (EscobariaService_PostUploadPackClient, error) {
	stream, err := c.cc.NewStream(ctx, &EscobariaService_ServiceDesc.Streams[5], "/protocol.EscobariaService/PostUploadPack", opts...)
	if err != nil {
		return nil, err
	}
	x := &escobariaServicePostUploadPackClient{stream}
	return x, nil
}

type EscobariaService_PostUploadPackClient interface {
	Send(*PostUploadPackRequest) error
	Recv() (*PostUploadPackResponse, error)
	grpc.ClientStream
}

type escobariaServicePostUploadPackClient struct {
	grpc.ClientStream
}

func (x *escobariaServicePostUploadPackClient) Send(m *PostUploadPackRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *escobariaServicePostUploadPackClient) Recv() (*PostUploadPackResponse, error) {
	m := new(PostUploadPackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *escobariaServiceClient) PostReceivePack(ctx context.Context, opts ...grpc.CallOption) (EscobariaService_PostReceivePackClient, error) {
	stream, err := c.cc.NewStream(ctx, &EscobariaService_ServiceDesc.Streams[6], "/protocol.EscobariaService/PostReceivePack", opts...)
	if err != nil {
		return nil, err
	}
	x := &escobariaServicePostReceivePackClient{stream}
	return x, nil
}

type EscobariaService_PostReceivePackClient interface {
	Send(*PostReceivePackRequest) error
	Recv() (*PostReceivePackResponse, error)
	grpc.ClientStream
}

type escobariaServicePostReceivePackClient struct {
	grpc.ClientStream
}

func (x *escobariaServicePostReceivePackClient) Send(m *PostReceivePackRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *escobariaServicePostReceivePackClient) Recv() (*PostReceivePackResponse, error) {
	m := new(PostReceivePackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EscobariaServiceServer is the server API for EscobariaService service.
// All implementations should embed UnimplementedEscobariaServiceServer
// for forward compatibility
type EscobariaServiceServer interface {
	// To forward 'git upload-pack' to silver-backend for SSH sessions
	// First pack stdin is nil
	UploadPack(EscobariaService_UploadPackServer) error
	// To forward 'git receive-pack' to silver-backend for SSH sessions
	// First pack stdin is nil
	ReceivePack(EscobariaService_ReceivePackServer) error
	// To forward 'git upload-archive' to silver-backend for SSH sessions
	// First pack stdin is nil
	UploadArchive(EscobariaService_UploadArchiveServer) error
	// The response body for GET /info/refs?service=git-upload-pack
	// Will be invoked when the user executes a `git fetch`, meaning the server
	// will upload the packs to that user. The user doesn't upload new objects.
	InfoRefsUploadPack(*InfoRefsRequest, EscobariaService_InfoRefsUploadPackServer) error
	// The response body for GET /info/refs?service=git-receive-pack
	// Will be invoked when the user executes a `git push`, but only advertises
	// references to the user.
	InfoRefsReceivePack(*InfoRefsRequest, EscobariaService_InfoRefsReceivePackServer) error
	// Request and response body for POST /upload-pack
	// First pack stdin is nil
	PostUploadPack(EscobariaService_PostUploadPackServer) error
	// Request and response body for POST /receive-pack
	// First pack stdin is nil
	PostReceivePack(EscobariaService_PostReceivePackServer) error
}

// UnimplementedEscobariaServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEscobariaServiceServer struct {
}

func (UnimplementedEscobariaServiceServer) UploadPack(EscobariaService_UploadPackServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadPack not implemented")
}
func (UnimplementedEscobariaServiceServer) ReceivePack(EscobariaService_ReceivePackServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceivePack not implemented")
}
func (UnimplementedEscobariaServiceServer) UploadArchive(EscobariaService_UploadArchiveServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadArchive not implemented")
}
func (UnimplementedEscobariaServiceServer) InfoRefsUploadPack(*InfoRefsRequest, EscobariaService_InfoRefsUploadPackServer) error {
	return status.Errorf(codes.Unimplemented, "method InfoRefsUploadPack not implemented")
}
func (UnimplementedEscobariaServiceServer) InfoRefsReceivePack(*InfoRefsRequest, EscobariaService_InfoRefsReceivePackServer) error {
	return status.Errorf(codes.Unimplemented, "method InfoRefsReceivePack not implemented")
}
func (UnimplementedEscobariaServiceServer) PostUploadPack(EscobariaService_PostUploadPackServer) error {
	return status.Errorf(codes.Unimplemented, "method PostUploadPack not implemented")
}
func (UnimplementedEscobariaServiceServer) PostReceivePack(EscobariaService_PostReceivePackServer) error {
	return status.Errorf(codes.Unimplemented, "method PostReceivePack not implemented")
}

// UnsafeEscobariaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EscobariaServiceServer will
// result in compilation errors.
type UnsafeEscobariaServiceServer interface {
	mustEmbedUnimplementedEscobariaServiceServer()
}

func RegisterEscobariaServiceServer(s grpc.ServiceRegistrar, srv EscobariaServiceServer) {
	s.RegisterService(&EscobariaService_ServiceDesc, srv)
}

func _EscobariaService_UploadPack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EscobariaServiceServer).UploadPack(&escobariaServiceUploadPackServer{stream})
}

type EscobariaService_UploadPackServer interface {
	Send(*UploadPackResponse) error
	Recv() (*UploadPackRequest, error)
	grpc.ServerStream
}

type escobariaServiceUploadPackServer struct {
	grpc.ServerStream
}

func (x *escobariaServiceUploadPackServer) Send(m *UploadPackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *escobariaServiceUploadPackServer) Recv() (*UploadPackRequest, error) {
	m := new(UploadPackRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EscobariaService_ReceivePack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EscobariaServiceServer).ReceivePack(&escobariaServiceReceivePackServer{stream})
}

type EscobariaService_ReceivePackServer interface {
	Send(*ReceivePackResponse) error
	Recv() (*ReceivePackRequest, error)
	grpc.ServerStream
}

type escobariaServiceReceivePackServer struct {
	grpc.ServerStream
}

func (x *escobariaServiceReceivePackServer) Send(m *ReceivePackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *escobariaServiceReceivePackServer) Recv() (*ReceivePackRequest, error) {
	m := new(ReceivePackRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EscobariaService_UploadArchive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EscobariaServiceServer).UploadArchive(&escobariaServiceUploadArchiveServer{stream})
}

type EscobariaService_UploadArchiveServer interface {
	Send(*UploadArchiveResponse) error
	Recv() (*UploadArchiveRequest, error)
	grpc.ServerStream
}

type escobariaServiceUploadArchiveServer struct {
	grpc.ServerStream
}

func (x *escobariaServiceUploadArchiveServer) Send(m *UploadArchiveResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *escobariaServiceUploadArchiveServer) Recv() (*UploadArchiveRequest, error) {
	m := new(UploadArchiveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EscobariaService_InfoRefsUploadPack_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InfoRefsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EscobariaServiceServer).InfoRefsUploadPack(m, &escobariaServiceInfoRefsUploadPackServer{stream})
}

type EscobariaService_InfoRefsUploadPackServer interface {
	Send(*InfoRefsResponse) error
	grpc.ServerStream
}

type escobariaServiceInfoRefsUploadPackServer struct {
	grpc.ServerStream
}

func (x *escobariaServiceInfoRefsUploadPackServer) Send(m *InfoRefsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EscobariaService_InfoRefsReceivePack_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InfoRefsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EscobariaServiceServer).InfoRefsReceivePack(m, &escobariaServiceInfoRefsReceivePackServer{stream})
}

type EscobariaService_InfoRefsReceivePackServer interface {
	Send(*InfoRefsResponse) error
	grpc.ServerStream
}

type escobariaServiceInfoRefsReceivePackServer struct {
	grpc.ServerStream
}

func (x *escobariaServiceInfoRefsReceivePackServer) Send(m *InfoRefsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EscobariaService_PostUploadPack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EscobariaServiceServer).PostUploadPack(&escobariaServicePostUploadPackServer{stream})
}

type EscobariaService_PostUploadPackServer interface {
	Send(*PostUploadPackResponse) error
	Recv() (*PostUploadPackRequest, error)
	grpc.ServerStream
}

type escobariaServicePostUploadPackServer struct {
	grpc.ServerStream
}

func (x *escobariaServicePostUploadPackServer) Send(m *PostUploadPackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *escobariaServicePostUploadPackServer) Recv() (*PostUploadPackRequest, error) {
	m := new(PostUploadPackRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EscobariaService_PostReceivePack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EscobariaServiceServer).PostReceivePack(&escobariaServicePostReceivePackServer{stream})
}

type EscobariaService_PostReceivePackServer interface {
	Send(*PostReceivePackResponse) error
	Recv() (*PostReceivePackRequest, error)
	grpc.ServerStream
}

type escobariaServicePostReceivePackServer struct {
	grpc.ServerStream
}

func (x *escobariaServicePostReceivePackServer) Send(m *PostReceivePackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *escobariaServicePostReceivePackServer) Recv() (*PostReceivePackRequest, error) {
	m := new(PostReceivePackRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EscobariaService_ServiceDesc is the grpc.ServiceDesc for EscobariaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EscobariaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.EscobariaService",
	HandlerType: (*EscobariaServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadPack",
			Handler:       _EscobariaService_UploadPack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceivePack",
			Handler:       _EscobariaService_ReceivePack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadArchive",
			Handler:       _EscobariaService_UploadArchive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "InfoRefsUploadPack",
			Handler:       _EscobariaService_InfoRefsUploadPack_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "InfoRefsReceivePack",
			Handler:       _EscobariaService_InfoRefsReceivePack_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PostUploadPack",
			Handler:       _EscobariaService_PostUploadPack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PostReceivePack",
			Handler:       _EscobariaService_PostReceivePack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protocol.proto",
}
