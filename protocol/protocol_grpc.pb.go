// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: protocol.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BravuraServiceClient is the client API for BravuraService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BravuraServiceClient interface {
	// To forward 'git upload-pack' to silver-backend for SSH sessions
	// First pack stdin is nil
	UploadPack(ctx context.Context, opts ...grpc.CallOption) (BravuraService_UploadPackClient, error)
	// To forward 'git receive-pack' to silver-backend for SSH sessions
	// First pack stdin is nil
	ReceivePack(ctx context.Context, opts ...grpc.CallOption) (BravuraService_ReceivePackClient, error)
	// To forward 'git upload-archive' to silver-backend for SSH sessions
	// First pack stdin is nil
	UploadArchive(ctx context.Context, opts ...grpc.CallOption) (BravuraService_UploadArchiveClient, error)
	// The response body for GET /info/refs?service=git-upload-pack
	// Will be invoked when the user executes a `git fetch`, meaning the server
	// will upload the packs to that user. The user doesn't upload new objects.
	InfoRefsUploadPack(ctx context.Context, in *InfoRefsRequest, opts ...grpc.CallOption) (BravuraService_InfoRefsUploadPackClient, error)
	// The response body for GET /info/refs?service=git-receive-pack
	// Will be invoked when the user executes a `git push`, but only advertises
	// references to the user.
	InfoRefsReceivePack(ctx context.Context, in *InfoRefsRequest, opts ...grpc.CallOption) (BravuraService_InfoRefsReceivePackClient, error)
	// Request and response body for POST /upload-pack
	// First pack stdin is nil
	PostUploadPack(ctx context.Context, opts ...grpc.CallOption) (BravuraService_PostUploadPackClient, error)
	// Request and response body for POST /receive-pack
	// First pack stdin is nil
	PostReceivePack(ctx context.Context, opts ...grpc.CallOption) (BravuraService_PostReceivePackClient, error)
}

type bravuraServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBravuraServiceClient(cc grpc.ClientConnInterface) BravuraServiceClient {
	return &bravuraServiceClient{cc}
}

func (c *bravuraServiceClient) UploadPack(ctx context.Context, opts ...grpc.CallOption) (BravuraService_UploadPackClient, error) {
	stream, err := c.cc.NewStream(ctx, &BravuraService_ServiceDesc.Streams[0], "/protocol.BravuraService/UploadPack", opts...)
	if err != nil {
		return nil, err
	}
	x := &bravuraServiceUploadPackClient{stream}
	return x, nil
}

type BravuraService_UploadPackClient interface {
	Send(*UploadPackRequest) error
	Recv() (*UploadPackResponse, error)
	grpc.ClientStream
}

type bravuraServiceUploadPackClient struct {
	grpc.ClientStream
}

func (x *bravuraServiceUploadPackClient) Send(m *UploadPackRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bravuraServiceUploadPackClient) Recv() (*UploadPackResponse, error) {
	m := new(UploadPackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bravuraServiceClient) ReceivePack(ctx context.Context, opts ...grpc.CallOption) (BravuraService_ReceivePackClient, error) {
	stream, err := c.cc.NewStream(ctx, &BravuraService_ServiceDesc.Streams[1], "/protocol.BravuraService/ReceivePack", opts...)
	if err != nil {
		return nil, err
	}
	x := &bravuraServiceReceivePackClient{stream}
	return x, nil
}

type BravuraService_ReceivePackClient interface {
	Send(*ReceivePackRequest) error
	Recv() (*ReceivePackResponse, error)
	grpc.ClientStream
}

type bravuraServiceReceivePackClient struct {
	grpc.ClientStream
}

func (x *bravuraServiceReceivePackClient) Send(m *ReceivePackRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bravuraServiceReceivePackClient) Recv() (*ReceivePackResponse, error) {
	m := new(ReceivePackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bravuraServiceClient) UploadArchive(ctx context.Context, opts ...grpc.CallOption) (BravuraService_UploadArchiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &BravuraService_ServiceDesc.Streams[2], "/protocol.BravuraService/UploadArchive", opts...)
	if err != nil {
		return nil, err
	}
	x := &bravuraServiceUploadArchiveClient{stream}
	return x, nil
}

type BravuraService_UploadArchiveClient interface {
	Send(*UploadArchiveRequest) error
	Recv() (*UploadArchiveResponse, error)
	grpc.ClientStream
}

type bravuraServiceUploadArchiveClient struct {
	grpc.ClientStream
}

func (x *bravuraServiceUploadArchiveClient) Send(m *UploadArchiveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bravuraServiceUploadArchiveClient) Recv() (*UploadArchiveResponse, error) {
	m := new(UploadArchiveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bravuraServiceClient) InfoRefsUploadPack(ctx context.Context, in *InfoRefsRequest, opts ...grpc.CallOption) (BravuraService_InfoRefsUploadPackClient, error) {
	stream, err := c.cc.NewStream(ctx, &BravuraService_ServiceDesc.Streams[3], "/protocol.BravuraService/InfoRefsUploadPack", opts...)
	if err != nil {
		return nil, err
	}
	x := &bravuraServiceInfoRefsUploadPackClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BravuraService_InfoRefsUploadPackClient interface {
	Recv() (*InfoRefsResponse, error)
	grpc.ClientStream
}

type bravuraServiceInfoRefsUploadPackClient struct {
	grpc.ClientStream
}

func (x *bravuraServiceInfoRefsUploadPackClient) Recv() (*InfoRefsResponse, error) {
	m := new(InfoRefsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bravuraServiceClient) InfoRefsReceivePack(ctx context.Context, in *InfoRefsRequest, opts ...grpc.CallOption) (BravuraService_InfoRefsReceivePackClient, error) {
	stream, err := c.cc.NewStream(ctx, &BravuraService_ServiceDesc.Streams[4], "/protocol.BravuraService/InfoRefsReceivePack", opts...)
	if err != nil {
		return nil, err
	}
	x := &bravuraServiceInfoRefsReceivePackClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BravuraService_InfoRefsReceivePackClient interface {
	Recv() (*InfoRefsResponse, error)
	grpc.ClientStream
}

type bravuraServiceInfoRefsReceivePackClient struct {
	grpc.ClientStream
}

func (x *bravuraServiceInfoRefsReceivePackClient) Recv() (*InfoRefsResponse, error) {
	m := new(InfoRefsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bravuraServiceClient) PostUploadPack(ctx context.Context, opts ...grpc.CallOption) (BravuraService_PostUploadPackClient, error) {
	stream, err := c.cc.NewStream(ctx, &BravuraService_ServiceDesc.Streams[5], "/protocol.BravuraService/PostUploadPack", opts...)
	if err != nil {
		return nil, err
	}
	x := &bravuraServicePostUploadPackClient{stream}
	return x, nil
}

type BravuraService_PostUploadPackClient interface {
	Send(*PostUploadPackRequest) error
	Recv() (*PostUploadPackResponse, error)
	grpc.ClientStream
}

type bravuraServicePostUploadPackClient struct {
	grpc.ClientStream
}

func (x *bravuraServicePostUploadPackClient) Send(m *PostUploadPackRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bravuraServicePostUploadPackClient) Recv() (*PostUploadPackResponse, error) {
	m := new(PostUploadPackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bravuraServiceClient) PostReceivePack(ctx context.Context, opts ...grpc.CallOption) (BravuraService_PostReceivePackClient, error) {
	stream, err := c.cc.NewStream(ctx, &BravuraService_ServiceDesc.Streams[6], "/protocol.BravuraService/PostReceivePack", opts...)
	if err != nil {
		return nil, err
	}
	x := &bravuraServicePostReceivePackClient{stream}
	return x, nil
}

type BravuraService_PostReceivePackClient interface {
	Send(*PostReceivePackRequest) error
	Recv() (*PostReceivePackResponse, error)
	grpc.ClientStream
}

type bravuraServicePostReceivePackClient struct {
	grpc.ClientStream
}

func (x *bravuraServicePostReceivePackClient) Send(m *PostReceivePackRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bravuraServicePostReceivePackClient) Recv() (*PostReceivePackResponse, error) {
	m := new(PostReceivePackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BravuraServiceServer is the server API for BravuraService service.
// All implementations should embed UnimplementedBravuraServiceServer
// for forward compatibility
type BravuraServiceServer interface {
	// To forward 'git upload-pack' to silver-backend for SSH sessions
	// First pack stdin is nil
	UploadPack(BravuraService_UploadPackServer) error
	// To forward 'git receive-pack' to silver-backend for SSH sessions
	// First pack stdin is nil
	ReceivePack(BravuraService_ReceivePackServer) error
	// To forward 'git upload-archive' to silver-backend for SSH sessions
	// First pack stdin is nil
	UploadArchive(BravuraService_UploadArchiveServer) error
	// The response body for GET /info/refs?service=git-upload-pack
	// Will be invoked when the user executes a `git fetch`, meaning the server
	// will upload the packs to that user. The user doesn't upload new objects.
	InfoRefsUploadPack(*InfoRefsRequest, BravuraService_InfoRefsUploadPackServer) error
	// The response body for GET /info/refs?service=git-receive-pack
	// Will be invoked when the user executes a `git push`, but only advertises
	// references to the user.
	InfoRefsReceivePack(*InfoRefsRequest, BravuraService_InfoRefsReceivePackServer) error
	// Request and response body for POST /upload-pack
	// First pack stdin is nil
	PostUploadPack(BravuraService_PostUploadPackServer) error
	// Request and response body for POST /receive-pack
	// First pack stdin is nil
	PostReceivePack(BravuraService_PostReceivePackServer) error
}

// UnimplementedBravuraServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBravuraServiceServer struct {
}

func (UnimplementedBravuraServiceServer) UploadPack(BravuraService_UploadPackServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadPack not implemented")
}
func (UnimplementedBravuraServiceServer) ReceivePack(BravuraService_ReceivePackServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceivePack not implemented")
}
func (UnimplementedBravuraServiceServer) UploadArchive(BravuraService_UploadArchiveServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadArchive not implemented")
}
func (UnimplementedBravuraServiceServer) InfoRefsUploadPack(*InfoRefsRequest, BravuraService_InfoRefsUploadPackServer) error {
	return status.Errorf(codes.Unimplemented, "method InfoRefsUploadPack not implemented")
}
func (UnimplementedBravuraServiceServer) InfoRefsReceivePack(*InfoRefsRequest, BravuraService_InfoRefsReceivePackServer) error {
	return status.Errorf(codes.Unimplemented, "method InfoRefsReceivePack not implemented")
}
func (UnimplementedBravuraServiceServer) PostUploadPack(BravuraService_PostUploadPackServer) error {
	return status.Errorf(codes.Unimplemented, "method PostUploadPack not implemented")
}
func (UnimplementedBravuraServiceServer) PostReceivePack(BravuraService_PostReceivePackServer) error {
	return status.Errorf(codes.Unimplemented, "method PostReceivePack not implemented")
}

// UnsafeBravuraServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BravuraServiceServer will
// result in compilation errors.
type UnsafeBravuraServiceServer interface {
	mustEmbedUnimplementedBravuraServiceServer()
}

func RegisterBravuraServiceServer(s grpc.ServiceRegistrar, srv BravuraServiceServer) {
	s.RegisterService(&BravuraService_ServiceDesc, srv)
}

func _BravuraService_UploadPack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BravuraServiceServer).UploadPack(&bravuraServiceUploadPackServer{stream})
}

type BravuraService_UploadPackServer interface {
	Send(*UploadPackResponse) error
	Recv() (*UploadPackRequest, error)
	grpc.ServerStream
}

type bravuraServiceUploadPackServer struct {
	grpc.ServerStream
}

func (x *bravuraServiceUploadPackServer) Send(m *UploadPackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bravuraServiceUploadPackServer) Recv() (*UploadPackRequest, error) {
	m := new(UploadPackRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BravuraService_ReceivePack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BravuraServiceServer).ReceivePack(&bravuraServiceReceivePackServer{stream})
}

type BravuraService_ReceivePackServer interface {
	Send(*ReceivePackResponse) error
	Recv() (*ReceivePackRequest, error)
	grpc.ServerStream
}

type bravuraServiceReceivePackServer struct {
	grpc.ServerStream
}

func (x *bravuraServiceReceivePackServer) Send(m *ReceivePackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bravuraServiceReceivePackServer) Recv() (*ReceivePackRequest, error) {
	m := new(ReceivePackRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BravuraService_UploadArchive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BravuraServiceServer).UploadArchive(&bravuraServiceUploadArchiveServer{stream})
}

type BravuraService_UploadArchiveServer interface {
	Send(*UploadArchiveResponse) error
	Recv() (*UploadArchiveRequest, error)
	grpc.ServerStream
}

type bravuraServiceUploadArchiveServer struct {
	grpc.ServerStream
}

func (x *bravuraServiceUploadArchiveServer) Send(m *UploadArchiveResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bravuraServiceUploadArchiveServer) Recv() (*UploadArchiveRequest, error) {
	m := new(UploadArchiveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BravuraService_InfoRefsUploadPack_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InfoRefsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BravuraServiceServer).InfoRefsUploadPack(m, &bravuraServiceInfoRefsUploadPackServer{stream})
}

type BravuraService_InfoRefsUploadPackServer interface {
	Send(*InfoRefsResponse) error
	grpc.ServerStream
}

type bravuraServiceInfoRefsUploadPackServer struct {
	grpc.ServerStream
}

func (x *bravuraServiceInfoRefsUploadPackServer) Send(m *InfoRefsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BravuraService_InfoRefsReceivePack_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InfoRefsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BravuraServiceServer).InfoRefsReceivePack(m, &bravuraServiceInfoRefsReceivePackServer{stream})
}

type BravuraService_InfoRefsReceivePackServer interface {
	Send(*InfoRefsResponse) error
	grpc.ServerStream
}

type bravuraServiceInfoRefsReceivePackServer struct {
	grpc.ServerStream
}

func (x *bravuraServiceInfoRefsReceivePackServer) Send(m *InfoRefsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BravuraService_PostUploadPack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BravuraServiceServer).PostUploadPack(&bravuraServicePostUploadPackServer{stream})
}

type BravuraService_PostUploadPackServer interface {
	Send(*PostUploadPackResponse) error
	Recv() (*PostUploadPackRequest, error)
	grpc.ServerStream
}

type bravuraServicePostUploadPackServer struct {
	grpc.ServerStream
}

func (x *bravuraServicePostUploadPackServer) Send(m *PostUploadPackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bravuraServicePostUploadPackServer) Recv() (*PostUploadPackRequest, error) {
	m := new(PostUploadPackRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BravuraService_PostReceivePack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BravuraServiceServer).PostReceivePack(&bravuraServicePostReceivePackServer{stream})
}

type BravuraService_PostReceivePackServer interface {
	Send(*PostReceivePackResponse) error
	Recv() (*PostReceivePackRequest, error)
	grpc.ServerStream
}

type bravuraServicePostReceivePackServer struct {
	grpc.ServerStream
}

func (x *bravuraServicePostReceivePackServer) Send(m *PostReceivePackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bravuraServicePostReceivePackServer) Recv() (*PostReceivePackRequest, error) {
	m := new(PostReceivePackRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BravuraService_ServiceDesc is the grpc.ServiceDesc for BravuraService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BravuraService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.BravuraService",
	HandlerType: (*BravuraServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadPack",
			Handler:       _BravuraService_UploadPack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceivePack",
			Handler:       _BravuraService_ReceivePack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadArchive",
			Handler:       _BravuraService_UploadArchive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "InfoRefsUploadPack",
			Handler:       _BravuraService_InfoRefsUploadPack_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "InfoRefsReceivePack",
			Handler:       _BravuraService_InfoRefsReceivePack_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PostUploadPack",
			Handler:       _BravuraService_PostUploadPack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PostReceivePack",
			Handler:       _BravuraService_PostReceivePack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protocol.proto",
}
